// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// faith_cpp
Rcpp::NumericVector faith_cpp(const Rcpp::NumericMatrix& assay, const Rcpp::List& rowTree);
RcppExport SEXP _mia_faith_cpp(SEXP assaySEXP, SEXP rowTreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type assay(assaySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type rowTree(rowTreeSEXP);
    rcpp_result_gen = Rcpp::wrap(faith_cpp(assay, rowTree));
    return rcpp_result_gen;
END_RCPP
}
// sumrowt
double sumrowt(const Rcpp::List& rowTree);
RcppExport SEXP _mia_sumrowt(SEXP rowTreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type rowTree(rowTreeSEXP);
    rcpp_result_gen = Rcpp::wrap(sumrowt(rowTree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mia_faith_cpp", (DL_FUNC) &_mia_faith_cpp, 2},
    {"_mia_sumrowt", (DL_FUNC) &_mia_sumrowt, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mia(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
